name: deploy_backend
on: workflow_dispatch
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./api
      AWS_REGION: eu-central-1
      ECR_REPOSITORY: esp42
      ECS_SERVICE: arn:aws:ecs:eu-central-1:637811218859:service/api/api-ApiService-T0lAAeeaW2oH
      ECS_CLUSTER: api
      ECS_TASK_DEFINITION: arn:aws:ecs:eu-central-1:637811218859:task-definition/api-api
      CONTAINER_NAME: 637811218859.dkr.ecr.eu-central-1.amazonaws.com/esp42:latest

    steps:

      - name: Checking out code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REPOSITORY
          docker tag $ECR_REPOSITORY:latest $CONTAINER_NAME
          docker push $CONTAINER_NAME

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
